func call 1 excuted in 0.00014138221740722656 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@decorator_3
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 3.3855438232421875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 0.0003046989440917969 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@decorator_3
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 3.0040740966796875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 1 excuted in 0.00011610984802246094 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 1.2874603271484375e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 6.699562072753906e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 6.9141387939453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 4.506111145019531e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 0.00010895729064941406 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 0.0001499652862548828 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 5.6743621826171875e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 3.814697265625e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 9.059906005859375e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 7.867813110351562e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 5.245208740234375e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 7.152557373046875e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 4.7206878662109375e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 1.0013580322265625e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 8.678436279296875e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 6.9141387939453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 2.47955322265625e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 8.702278137207031e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 0.0001399517059326172 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 0.00013399124145507812 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 3.814697265625e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 5.9604644775390625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 8.106231689453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 2.1457672119140625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 1.0967254638671875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 0.0001399517059326172 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 1.0013580322265625e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 5.602836608886719e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 6.9141387939453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 2.9087066650390625e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 3.0040740966796875e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 0.00010323524475097656 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 8.225440979003906e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 7.152557373046875e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 1.0013580322265625e-05 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 8.821487426757812e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 2.1457672119140625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 7.152557373046875e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 0.00010585784912109375 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 1.0013580322265625e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 0.00015997886657714844 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 8.106231689453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 4.100799560546875e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 0.00012493133544921875 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 2.288818359375e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 5.602836608886719e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 4.76837158203125e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 6.9141387939453125e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 1.2636184692382812e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 1.9073486328125e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 7.152557373046875e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 2.7179718017578125e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 8.821487426757812e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 2.1219253540039062e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 6.198883056640625e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 2.8133392333984375e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 0.00011110305786132812 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 4.696846008300781e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 2.002716064453125e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 5.245208740234375e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 6.9141387939453125e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 8.821487426757812e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 1.9073486328125e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 5.7220458984375e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 2.9087066650390625e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 7.867813110351562e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 6.985664367675781e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 5.9604644775390625e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 0.00015616416931152344 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 0.00013208389282226562 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 5.507469177246094e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 0.0001010894775390625 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 2.86102294921875e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 5.9604644775390625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 8.106231689453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 2.1457672119140625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 5.7220458984375e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

func call 1 excuted in 4.363059997558594e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 1.4066696166992188e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 0.00013685226440429688 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 5.9604644775390625e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

funx call 1 excuted in 0.00012612342834472656 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 3 excuted in 8.225440979003906e-05 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

funx call 2 excuted in 3.910064697265625e-05 sec
Name:	funx
Type:	<class 'function'>
Signs:	(n=2, m=5)
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def funx(n=2, m=5):
		    print("I am ready to do serious stuff")
		    max_val = float('-inf')
		    n =  random.randint(10,751)
		    res = [pow(i,2) for i in range(n)]
		    for i in res:
		        if i > max_val: 
		            max_val = i
		
Output:	I am ready to do serious stuff
		

func call 4 excuted in 0.0001049041748046875 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@test_decorator
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

even call 1 excuted in 4.76837158203125e-06 sec
Name:	even
Type:	<class 'function'>
Signs:	(input_list)
Args: 	positional ([0, 2, 3, 4, 5, 6],) 
		key=worded {}

Doc:	This function return even numbers in the given list
		:param input_list: List that we want to search for even number inside
		This function return the even numbers in the list

Source:	@test_decorator
		def even(input_list):
		    """
		    This function return even numbers in the given list
		    :param input_list: List that we want to search for even number inside
		    This function return the even numbers in the list
		    """
		    return list(filter(lambda x: x % 2 == 0, input_list))
		
Output:	

solver call 1 excuted in 6.9141387939453125e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 3 excuted in 7.867813110351562e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		[1, 4, 6, 4, 1]
		

solver call 2 excuted in 2.1457672119140625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function solve a quadratic equation a*x^2 + b*x + c = 0
		:param a: x^2 coeffecient
		:param b: x   coeffecient
		:param c:     constant
		This function return the solution if it exist in form of list 

Source:	@test_decorator
		def solver(a, b, c):
		    """
		    This function solve a quadratic equation a*x^2 + b*x + c = 0
		    :param a: x^2 coeffecient
		    :param b: x   coeffecient
		    :param c:     constant
		    This function return the solution if it exist in form of list 
		    """
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #dis is positive -> 2 solution 
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #dis is 0 -> duplicated solution
		        return [-b / (2 * a)]
		    else:
		        #Complex Roots
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	

pascal call 4 excuted in 6.9141387939453125e-06 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (4,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@test_decorator
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		[1, 3, 3, 1]
		

